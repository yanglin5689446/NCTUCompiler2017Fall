Terminals unused in grammar

   DEF


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: ID $@1 MK_SEMICOLON program_body END ID

    3 program_body: opt_decl_list opt_func_decl_list compound_stmt

    4 opt_decl_list: decl_list
    5              | %empty

    6 decl_list: decl_list decl
    7          | decl

    8 decl: VAR id_list MK_COLON scalar_type MK_SEMICOLON
    9     | VAR id_list MK_COLON array_type MK_SEMICOLON
   10     | VAR id_list MK_COLON literal_const MK_SEMICOLON

   11 int_const: INT_CONST
   12          | OCTAL_CONST

   13 literal_const: int_const
   14              | OP_SUB int_const
   15              | FLOAT_CONST
   16              | OP_SUB FLOAT_CONST
   17              | SCIENTIFIC
   18              | OP_SUB SCIENTIFIC
   19              | STR_CONST
   20              | TRUE
   21              | FALSE

   22 opt_func_decl_list: func_decl_list
   23                   | %empty

   24 func_decl_list: func_decl_list func_decl
   25               | func_decl

   26 $@2: %empty

   27 $@3: %empty

   28 $@4: %empty

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END ID

   30 opt_param_list: param_list
   31               | %empty

   32 param_list: param_list MK_SEMICOLON param
   33           | param

   34 param: id_list MK_COLON type

   35 id_list: id_list MK_COMMA ID
   36        | ID

   37 opt_type: MK_COLON type
   38         | %empty

   39 type: scalar_type
   40     | array_type

   41 scalar_type: INTEGER
   42            | REAL
   43            | BOOLEAN
   44            | STRING

   45 array_type: ARRAY int_const TO int_const OF type

   46 stmt: compound_stmt
   47     | simple_stmt
   48     | cond_stmt
   49     | while_stmt
   50     | for_stmt
   51     | return_stmt
   52     | proc_call_stmt

   53 $@5: %empty

   54 compound_stmt: BEG $@5 opt_decl_list opt_stmt_list END

   55 opt_stmt_list: stmt_list
   56              | %empty

   57 stmt_list: stmt_list stmt
   58          | stmt

   59 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON
   60            | PRINT boolean_expr MK_SEMICOLON
   61            | READ boolean_expr MK_SEMICOLON

   62 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

   63 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   64          | IF boolean_expr THEN opt_stmt_list END IF

   65 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO

   66 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

   67 return_stmt: RETURN boolean_expr MK_SEMICOLON

   68 opt_boolean_expr_list: boolean_expr_list
   69                      | %empty

   70 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr
   71                  | boolean_expr

   72 boolean_expr: boolean_expr OP_OR boolean_term
   73             | boolean_term

   74 boolean_term: boolean_term OP_AND boolean_factor
   75             | boolean_factor

   76 boolean_factor: OP_NOT boolean_factor
   77               | relop_expr

   78 relop_expr: expr rel_op expr
   79           | expr

   80 rel_op: OP_LT
   81       | OP_LE
   82       | OP_EQ
   83       | OP_GE
   84       | OP_GT
   85       | OP_NE

   86 expr: expr add_op term
   87     | term

   88 add_op: OP_ADD
   89       | OP_SUB

   90 term: term mul_op factor
   91     | factor

   92 mul_op: OP_MUL
   93       | OP_DIV
   94       | OP_MOD

   95 factor: var_ref
   96       | OP_SUB var_ref
   97       | MK_LPAREN boolean_expr MK_RPAREN
   98       | OP_SUB MK_LPAREN boolean_expr MK_RPAREN
   99       | ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  100       | OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN
  101       | literal_const

  102 var_ref: ID
  103        | var_ref dim

  104 dim: MK_LB boolean_expr MK_RB


Terminals, with rules where they appear

$end (0) 0
error (256)
ARRAY (258) 45
BEG (259) 54
BOOLEAN (260) 43
DEF (261)
DO (262) 65 66
ELSE (263) 63
END (264) 2 29 54 63 64 65 66
FOR (265) 66
INTEGER (266) 41
IF (267) 63 64
OF (268) 45
PRINT (269) 60
READ (270) 61
REAL (271) 42
RETURN (272) 67
STRING (273) 44
THEN (274) 63 64
TO (275) 45 66
VAR (276) 8 9 10
WHILE (277) 65
OP_ADD (278) 88
OP_SUB (279) 14 16 18 89 96 98 100
OP_MUL (280) 92
OP_DIV (281) 93
OP_MOD (282) 94
OP_ASSIGN (283) 59 66
OP_EQ (284) 82
OP_NE (285) 85
OP_GT (286) 84
OP_LT (287) 80
OP_GE (288) 83
OP_LE (289) 81
OP_AND (290) 74
OP_OR (291) 72
OP_NOT (292) 76
MK_COMMA (293) 35 70
MK_COLON (294) 8 9 10 34 37
MK_SEMICOLON (295) 2 8 9 10 29 32 59 60 61 62 67
MK_LPAREN (296) 29 62 97 98 99 100
MK_RPAREN (297) 29 62 97 98 99 100
MK_LB (298) 104
MK_RB (299) 104
TRUE (300) 20
FALSE (301) 21
ID (302) 2 29 35 36 62 66 99 100 102
INT_CONST (303) 11
OCTAL_CONST (304) 12
FLOAT_CONST (305) 15 16
SCIENTIFIC (306) 17 18
STR_CONST (307) 19


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 2, on right: 0
$@1 (55)
    on left: 1, on right: 2
program_body (56)
    on left: 3, on right: 2
opt_decl_list (57)
    on left: 4 5, on right: 3 54
decl_list (58)
    on left: 6 7, on right: 4 6
decl (59)
    on left: 8 9 10, on right: 6 7
int_const (60)
    on left: 11 12, on right: 13 14 45 66
literal_const (61)
    on left: 13 14 15 16 17 18 19 20 21, on right: 10 101
opt_func_decl_list (62)
    on left: 22 23, on right: 3
func_decl_list (63)
    on left: 24 25, on right: 22 24
func_decl (64)
    on left: 29, on right: 24 25
$@2 (65)
    on left: 26, on right: 29
$@3 (66)
    on left: 27, on right: 29
$@4 (67)
    on left: 28, on right: 29
opt_param_list (68)
    on left: 30 31, on right: 29
param_list (69)
    on left: 32 33, on right: 30 32
param (70)
    on left: 34, on right: 32 33
id_list (71)
    on left: 35 36, on right: 8 9 10 34 35
opt_type (72)
    on left: 37 38, on right: 29
type (73)
    on left: 39 40, on right: 34 37 45
scalar_type (74)
    on left: 41 42 43 44, on right: 8 39
array_type (75)
    on left: 45, on right: 9 40
stmt (76)
    on left: 46 47 48 49 50 51 52, on right: 57 58
compound_stmt (77)
    on left: 54, on right: 3 29 46
$@5 (78)
    on left: 53, on right: 54
opt_stmt_list (79)
    on left: 55 56, on right: 54 63 64 65 66
stmt_list (80)
    on left: 57 58, on right: 55 57
simple_stmt (81)
    on left: 59 60 61, on right: 47
proc_call_stmt (82)
    on left: 62, on right: 52
cond_stmt (83)
    on left: 63 64, on right: 48
while_stmt (84)
    on left: 65, on right: 49
for_stmt (85)
    on left: 66, on right: 50
return_stmt (86)
    on left: 67, on right: 51
opt_boolean_expr_list (87)
    on left: 68 69, on right: 62 99 100
boolean_expr_list (88)
    on left: 70 71, on right: 68 70
boolean_expr (89)
    on left: 72 73, on right: 59 60 61 63 64 65 67 70 71 72 97 98 104
boolean_term (90)
    on left: 74 75, on right: 72 73 74
boolean_factor (91)
    on left: 76 77, on right: 74 75 76
relop_expr (92)
    on left: 78 79, on right: 77
rel_op (93)
    on left: 80 81 82 83 84 85, on right: 78
expr (94)
    on left: 86 87, on right: 78 79 86
add_op (95)
    on left: 88 89, on right: 86
term (96)
    on left: 90 91, on right: 86 87 90
mul_op (97)
    on left: 92 93 94, on right: 90
factor (98)
    on left: 95 96 97 98 99 100 101, on right: 90 91
var_ref (99)
    on left: 102 103, on right: 59 95 96 103
dim (100)
    on left: 104, on right: 103


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    2 program: ID . $@1 MK_SEMICOLON program_body END ID

    $default  reduce using rule 1 ($@1)

    $@1  go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    2 program: ID $@1 . MK_SEMICOLON program_body END ID

    MK_SEMICOLON  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    2 program: ID $@1 MK_SEMICOLON . program_body END ID

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (opt_decl_list)

    program_body   go to state 7
    opt_decl_list  go to state 8
    decl_list      go to state 9
    decl           go to state 10


State 6

    8 decl: VAR . id_list MK_COLON scalar_type MK_SEMICOLON
    9     | VAR . id_list MK_COLON array_type MK_SEMICOLON
   10     | VAR . id_list MK_COLON literal_const MK_SEMICOLON

    ID  shift, and go to state 11

    id_list  go to state 12


State 7

    2 program: ID $@1 MK_SEMICOLON program_body . END ID

    END  shift, and go to state 13


State 8

    3 program_body: opt_decl_list . opt_func_decl_list compound_stmt

    ID  shift, and go to state 14

    $default  reduce using rule 23 (opt_func_decl_list)

    opt_func_decl_list  go to state 15
    func_decl_list      go to state 16
    func_decl           go to state 17


State 9

    4 opt_decl_list: decl_list .
    6 decl_list: decl_list . decl

    VAR  shift, and go to state 6

    $default  reduce using rule 4 (opt_decl_list)

    decl  go to state 18


State 10

    7 decl_list: decl .

    $default  reduce using rule 7 (decl_list)


State 11

   36 id_list: ID .

    $default  reduce using rule 36 (id_list)


State 12

    8 decl: VAR id_list . MK_COLON scalar_type MK_SEMICOLON
    9     | VAR id_list . MK_COLON array_type MK_SEMICOLON
   10     | VAR id_list . MK_COLON literal_const MK_SEMICOLON
   35 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 19
    MK_COLON  shift, and go to state 20


State 13

    2 program: ID $@1 MK_SEMICOLON program_body END . ID

    ID  shift, and go to state 21


State 14

   29 func_decl: ID . $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END ID

    $default  reduce using rule 26 ($@2)

    $@2  go to state 22


State 15

    3 program_body: opt_decl_list opt_func_decl_list . compound_stmt

    BEG  shift, and go to state 23

    compound_stmt  go to state 24


State 16

   22 opt_func_decl_list: func_decl_list .
   24 func_decl_list: func_decl_list . func_decl

    ID  shift, and go to state 14

    $default  reduce using rule 22 (opt_func_decl_list)

    func_decl  go to state 25


State 17

   25 func_decl_list: func_decl .

    $default  reduce using rule 25 (func_decl_list)


State 18

    6 decl_list: decl_list decl .

    $default  reduce using rule 6 (decl_list)


State 19

   35 id_list: id_list MK_COMMA . ID

    ID  shift, and go to state 26


State 20

    8 decl: VAR id_list MK_COLON . scalar_type MK_SEMICOLON
    9     | VAR id_list MK_COLON . array_type MK_SEMICOLON
   10     | VAR id_list MK_COLON . literal_const MK_SEMICOLON

    ARRAY        shift, and go to state 27
    BOOLEAN      shift, and go to state 28
    INTEGER      shift, and go to state 29
    REAL         shift, and go to state 30
    STRING       shift, and go to state 31
    OP_SUB       shift, and go to state 32
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const      go to state 40
    literal_const  go to state 41
    scalar_type    go to state 42
    array_type     go to state 43


State 21

    2 program: ID $@1 MK_SEMICOLON program_body END ID .

    $default  reduce using rule 2 (program)


State 22

   29 func_decl: ID $@2 . MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END ID

    MK_LPAREN  shift, and go to state 44


State 23

   54 compound_stmt: BEG . $@5 opt_decl_list opt_stmt_list END

    $default  reduce using rule 53 ($@5)

    $@5  go to state 45


State 24

    3 program_body: opt_decl_list opt_func_decl_list compound_stmt .

    $default  reduce using rule 3 (program_body)


State 25

   24 func_decl_list: func_decl_list func_decl .

    $default  reduce using rule 24 (func_decl_list)


State 26

   35 id_list: id_list MK_COMMA ID .

    $default  reduce using rule 35 (id_list)


State 27

   45 array_type: ARRAY . int_const TO int_const OF type

    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36

    int_const  go to state 46


State 28

   43 scalar_type: BOOLEAN .

    $default  reduce using rule 43 (scalar_type)


State 29

   41 scalar_type: INTEGER .

    $default  reduce using rule 41 (scalar_type)


State 30

   42 scalar_type: REAL .

    $default  reduce using rule 42 (scalar_type)


State 31

   44 scalar_type: STRING .

    $default  reduce using rule 44 (scalar_type)


State 32

   14 literal_const: OP_SUB . int_const
   16              | OP_SUB . FLOAT_CONST
   18              | OP_SUB . SCIENTIFIC

    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48

    int_const  go to state 49


State 33

   20 literal_const: TRUE .

    $default  reduce using rule 20 (literal_const)


State 34

   21 literal_const: FALSE .

    $default  reduce using rule 21 (literal_const)


State 35

   11 int_const: INT_CONST .

    $default  reduce using rule 11 (int_const)


State 36

   12 int_const: OCTAL_CONST .

    $default  reduce using rule 12 (int_const)


State 37

   15 literal_const: FLOAT_CONST .

    $default  reduce using rule 15 (literal_const)


State 38

   17 literal_const: SCIENTIFIC .

    $default  reduce using rule 17 (literal_const)


State 39

   19 literal_const: STR_CONST .

    $default  reduce using rule 19 (literal_const)


State 40

   13 literal_const: int_const .

    $default  reduce using rule 13 (literal_const)


State 41

   10 decl: VAR id_list MK_COLON literal_const . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 50


State 42

    8 decl: VAR id_list MK_COLON scalar_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 51


State 43

    9 decl: VAR id_list MK_COLON array_type . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 52


State 44

   29 func_decl: ID $@2 MK_LPAREN . opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END ID

    ID  shift, and go to state 11

    $default  reduce using rule 31 (opt_param_list)

    opt_param_list  go to state 53
    param_list      go to state 54
    param           go to state 55
    id_list         go to state 56


State 45

   54 compound_stmt: BEG $@5 . opt_decl_list opt_stmt_list END

    VAR  shift, and go to state 6

    $default  reduce using rule 5 (opt_decl_list)

    opt_decl_list  go to state 57
    decl_list      go to state 9
    decl           go to state 10


State 46

   45 array_type: ARRAY int_const . TO int_const OF type

    TO  shift, and go to state 58


State 47

   16 literal_const: OP_SUB FLOAT_CONST .

    $default  reduce using rule 16 (literal_const)


State 48

   18 literal_const: OP_SUB SCIENTIFIC .

    $default  reduce using rule 18 (literal_const)


State 49

   14 literal_const: OP_SUB int_const .

    $default  reduce using rule 14 (literal_const)


State 50

   10 decl: VAR id_list MK_COLON literal_const MK_SEMICOLON .

    $default  reduce using rule 10 (decl)


State 51

    8 decl: VAR id_list MK_COLON scalar_type MK_SEMICOLON .

    $default  reduce using rule 8 (decl)


State 52

    9 decl: VAR id_list MK_COLON array_type MK_SEMICOLON .

    $default  reduce using rule 9 (decl)


State 53

   29 func_decl: ID $@2 MK_LPAREN opt_param_list . $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END ID

    $default  reduce using rule 27 ($@3)

    $@3  go to state 59


State 54

   30 opt_param_list: param_list .
   32 param_list: param_list . MK_SEMICOLON param

    MK_SEMICOLON  shift, and go to state 60

    $default  reduce using rule 30 (opt_param_list)


State 55

   33 param_list: param .

    $default  reduce using rule 33 (param_list)


State 56

   34 param: id_list . MK_COLON type
   35 id_list: id_list . MK_COMMA ID

    MK_COMMA  shift, and go to state 19
    MK_COLON  shift, and go to state 61


State 57

   54 compound_stmt: BEG $@5 opt_decl_list . opt_stmt_list END

    BEG     shift, and go to state 23
    FOR     shift, and go to state 62
    IF      shift, and go to state 63
    PRINT   shift, and go to state 64
    READ    shift, and go to state 65
    RETURN  shift, and go to state 66
    WHILE   shift, and go to state 67
    ID      shift, and go to state 68

    $default  reduce using rule 56 (opt_stmt_list)

    stmt            go to state 69
    compound_stmt   go to state 70
    opt_stmt_list   go to state 71
    stmt_list       go to state 72
    simple_stmt     go to state 73
    proc_call_stmt  go to state 74
    cond_stmt       go to state 75
    while_stmt      go to state 76
    for_stmt        go to state 77
    return_stmt     go to state 78
    var_ref         go to state 79


State 58

   45 array_type: ARRAY int_const TO . int_const OF type

    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36

    int_const  go to state 80


State 59

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 . MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END ID

    MK_RPAREN  shift, and go to state 81


State 60

   32 param_list: param_list MK_SEMICOLON . param

    ID  shift, and go to state 11

    param    go to state 82
    id_list  go to state 56


State 61

   34 param: id_list MK_COLON . type

    ARRAY    shift, and go to state 27
    BOOLEAN  shift, and go to state 28
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 83
    scalar_type  go to state 84
    array_type   go to state 85


State 62

   66 for_stmt: FOR . ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    ID  shift, and go to state 86


State 63

   63 cond_stmt: IF . boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF
   64          | IF . boolean_expr THEN opt_stmt_list END IF

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 92
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 64

   60 simple_stmt: PRINT . boolean_expr MK_SEMICOLON

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 100
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 65

   61 simple_stmt: READ . boolean_expr MK_SEMICOLON

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 101
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 66

   67 return_stmt: RETURN . boolean_expr MK_SEMICOLON

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 102
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 67

   65 while_stmt: WHILE . boolean_expr DO opt_stmt_list END DO

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 103
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 68

   62 proc_call_stmt: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON
  102 var_ref: ID .

    MK_LPAREN  shift, and go to state 104

    $default  reduce using rule 102 (var_ref)


State 69

   58 stmt_list: stmt .

    $default  reduce using rule 58 (stmt_list)


State 70

   46 stmt: compound_stmt .

    $default  reduce using rule 46 (stmt)


State 71

   54 compound_stmt: BEG $@5 opt_decl_list opt_stmt_list . END

    END  shift, and go to state 105


State 72

   55 opt_stmt_list: stmt_list .
   57 stmt_list: stmt_list . stmt

    BEG     shift, and go to state 23
    FOR     shift, and go to state 62
    IF      shift, and go to state 63
    PRINT   shift, and go to state 64
    READ    shift, and go to state 65
    RETURN  shift, and go to state 66
    WHILE   shift, and go to state 67
    ID      shift, and go to state 68

    $default  reduce using rule 55 (opt_stmt_list)

    stmt            go to state 106
    compound_stmt   go to state 70
    simple_stmt     go to state 73
    proc_call_stmt  go to state 74
    cond_stmt       go to state 75
    while_stmt      go to state 76
    for_stmt        go to state 77
    return_stmt     go to state 78
    var_ref         go to state 79


State 73

   47 stmt: simple_stmt .

    $default  reduce using rule 47 (stmt)


State 74

   52 stmt: proc_call_stmt .

    $default  reduce using rule 52 (stmt)


State 75

   48 stmt: cond_stmt .

    $default  reduce using rule 48 (stmt)


State 76

   49 stmt: while_stmt .

    $default  reduce using rule 49 (stmt)


State 77

   50 stmt: for_stmt .

    $default  reduce using rule 50 (stmt)


State 78

   51 stmt: return_stmt .

    $default  reduce using rule 51 (stmt)


State 79

   59 simple_stmt: var_ref . OP_ASSIGN boolean_expr MK_SEMICOLON
  103 var_ref: var_ref . dim

    OP_ASSIGN  shift, and go to state 107
    MK_LB      shift, and go to state 108

    dim  go to state 109


State 80

   45 array_type: ARRAY int_const TO int_const . OF type

    OF  shift, and go to state 110


State 81

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN . opt_type $@4 MK_SEMICOLON compound_stmt END ID

    MK_COLON  shift, and go to state 111

    $default  reduce using rule 38 (opt_type)

    opt_type  go to state 112


State 82

   32 param_list: param_list MK_SEMICOLON param .

    $default  reduce using rule 32 (param_list)


State 83

   34 param: id_list MK_COLON type .

    $default  reduce using rule 34 (param)


State 84

   39 type: scalar_type .

    $default  reduce using rule 39 (type)


State 85

   40 type: array_type .

    $default  reduce using rule 40 (type)


State 86

   66 for_stmt: FOR ID . OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO

    OP_ASSIGN  shift, and go to state 113


State 87

   14 literal_const: OP_SUB . int_const
   16              | OP_SUB . FLOAT_CONST
   18              | OP_SUB . SCIENTIFIC
   96 factor: OP_SUB . var_ref
   98       | OP_SUB . MK_LPAREN boolean_expr MK_RPAREN
  100       | OP_SUB . ID MK_LPAREN opt_boolean_expr_list MK_RPAREN

    MK_LPAREN    shift, and go to state 114
    ID           shift, and go to state 115
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48

    int_const  go to state 49
    var_ref    go to state 116


State 88

   76 boolean_factor: OP_NOT . boolean_factor

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_factor  go to state 117
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 89

   97 factor: MK_LPAREN . boolean_expr MK_RPAREN

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 118
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 90

   99 factor: ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  102 var_ref: ID .

    MK_LPAREN  shift, and go to state 119

    $default  reduce using rule 102 (var_ref)


State 91

  101 factor: literal_const .

    $default  reduce using rule 101 (factor)


State 92

   63 cond_stmt: IF boolean_expr . THEN opt_stmt_list ELSE opt_stmt_list END IF
   64          | IF boolean_expr . THEN opt_stmt_list END IF
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    THEN   shift, and go to state 120
    OP_OR  shift, and go to state 121


State 93

   73 boolean_expr: boolean_term .
   74 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 122

    $default  reduce using rule 73 (boolean_expr)


State 94

   75 boolean_term: boolean_factor .

    $default  reduce using rule 75 (boolean_term)


State 95

   77 boolean_factor: relop_expr .

    $default  reduce using rule 77 (boolean_factor)


State 96

   78 relop_expr: expr . rel_op expr
   79           | expr .
   86 expr: expr . add_op term

    OP_ADD  shift, and go to state 123
    OP_SUB  shift, and go to state 124
    OP_EQ   shift, and go to state 125
    OP_NE   shift, and go to state 126
    OP_GT   shift, and go to state 127
    OP_LT   shift, and go to state 128
    OP_GE   shift, and go to state 129
    OP_LE   shift, and go to state 130

    $default  reduce using rule 79 (relop_expr)

    rel_op  go to state 131
    add_op  go to state 132


State 97

   87 expr: term .
   90 term: term . mul_op factor

    OP_MUL  shift, and go to state 133
    OP_DIV  shift, and go to state 134
    OP_MOD  shift, and go to state 135

    $default  reduce using rule 87 (expr)

    mul_op  go to state 136


State 98

   91 term: factor .

    $default  reduce using rule 91 (term)


State 99

   95 factor: var_ref .
  103 var_ref: var_ref . dim

    MK_LB  shift, and go to state 108

    $default  reduce using rule 95 (factor)

    dim  go to state 109


State 100

   60 simple_stmt: PRINT boolean_expr . MK_SEMICOLON
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 121
    MK_SEMICOLON  shift, and go to state 137


State 101

   61 simple_stmt: READ boolean_expr . MK_SEMICOLON
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 121
    MK_SEMICOLON  shift, and go to state 138


State 102

   67 return_stmt: RETURN boolean_expr . MK_SEMICOLON
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 121
    MK_SEMICOLON  shift, and go to state 139


State 103

   65 while_stmt: WHILE boolean_expr . DO opt_stmt_list END DO
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    DO     shift, and go to state 140
    OP_OR  shift, and go to state 121


State 104

   62 proc_call_stmt: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN MK_SEMICOLON

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    $default  reduce using rule 69 (opt_boolean_expr_list)

    int_const              go to state 40
    literal_const          go to state 91
    opt_boolean_expr_list  go to state 141
    boolean_expr_list      go to state 142
    boolean_expr           go to state 143
    boolean_term           go to state 93
    boolean_factor         go to state 94
    relop_expr             go to state 95
    expr                   go to state 96
    term                   go to state 97
    factor                 go to state 98
    var_ref                go to state 99


State 105

   54 compound_stmt: BEG $@5 opt_decl_list opt_stmt_list END .

    $default  reduce using rule 54 (compound_stmt)


State 106

   57 stmt_list: stmt_list stmt .

    $default  reduce using rule 57 (stmt_list)


State 107

   59 simple_stmt: var_ref OP_ASSIGN . boolean_expr MK_SEMICOLON

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 144
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 108

  104 dim: MK_LB . boolean_expr MK_RB

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 145
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 109

  103 var_ref: var_ref dim .

    $default  reduce using rule 103 (var_ref)


State 110

   45 array_type: ARRAY int_const TO int_const OF . type

    ARRAY    shift, and go to state 27
    BOOLEAN  shift, and go to state 28
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 146
    scalar_type  go to state 84
    array_type   go to state 85


State 111

   37 opt_type: MK_COLON . type

    ARRAY    shift, and go to state 27
    BOOLEAN  shift, and go to state 28
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    type         go to state 147
    scalar_type  go to state 84
    array_type   go to state 85


State 112

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type . $@4 MK_SEMICOLON compound_stmt END ID

    $default  reduce using rule 28 ($@4)

    $@4  go to state 148


State 113

   66 for_stmt: FOR ID OP_ASSIGN . int_const TO int_const DO opt_stmt_list END DO

    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36

    int_const  go to state 149


State 114

   98 factor: OP_SUB MK_LPAREN . boolean_expr MK_RPAREN

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 150
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 115

  100 factor: OP_SUB ID . MK_LPAREN opt_boolean_expr_list MK_RPAREN
  102 var_ref: ID .

    MK_LPAREN  shift, and go to state 151

    $default  reduce using rule 102 (var_ref)


State 116

   96 factor: OP_SUB var_ref .
  103 var_ref: var_ref . dim

    MK_LB  shift, and go to state 108

    $default  reduce using rule 96 (factor)

    dim  go to state 109


State 117

   76 boolean_factor: OP_NOT boolean_factor .

    $default  reduce using rule 76 (boolean_factor)


State 118

   72 boolean_expr: boolean_expr . OP_OR boolean_term
   97 factor: MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 121
    MK_RPAREN  shift, and go to state 152


State 119

   99 factor: ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    $default  reduce using rule 69 (opt_boolean_expr_list)

    int_const              go to state 40
    literal_const          go to state 91
    opt_boolean_expr_list  go to state 153
    boolean_expr_list      go to state 142
    boolean_expr           go to state 143
    boolean_term           go to state 93
    boolean_factor         go to state 94
    relop_expr             go to state 95
    expr                   go to state 96
    term                   go to state 97
    factor                 go to state 98
    var_ref                go to state 99


State 120

   63 cond_stmt: IF boolean_expr THEN . opt_stmt_list ELSE opt_stmt_list END IF
   64          | IF boolean_expr THEN . opt_stmt_list END IF

    BEG     shift, and go to state 23
    FOR     shift, and go to state 62
    IF      shift, and go to state 63
    PRINT   shift, and go to state 64
    READ    shift, and go to state 65
    RETURN  shift, and go to state 66
    WHILE   shift, and go to state 67
    ID      shift, and go to state 68

    $default  reduce using rule 56 (opt_stmt_list)

    stmt            go to state 69
    compound_stmt   go to state 70
    opt_stmt_list   go to state 154
    stmt_list       go to state 72
    simple_stmt     go to state 73
    proc_call_stmt  go to state 74
    cond_stmt       go to state 75
    while_stmt      go to state 76
    for_stmt        go to state 77
    return_stmt     go to state 78
    var_ref         go to state 79


State 121

   72 boolean_expr: boolean_expr OP_OR . boolean_term

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_term    go to state 155
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 122

   74 boolean_term: boolean_term OP_AND . boolean_factor

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_factor  go to state 156
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 123

   88 add_op: OP_ADD .

    $default  reduce using rule 88 (add_op)


State 124

   89 add_op: OP_SUB .

    $default  reduce using rule 89 (add_op)


State 125

   82 rel_op: OP_EQ .

    $default  reduce using rule 82 (rel_op)


State 126

   85 rel_op: OP_NE .

    $default  reduce using rule 85 (rel_op)


State 127

   84 rel_op: OP_GT .

    $default  reduce using rule 84 (rel_op)


State 128

   80 rel_op: OP_LT .

    $default  reduce using rule 80 (rel_op)


State 129

   83 rel_op: OP_GE .

    $default  reduce using rule 83 (rel_op)


State 130

   81 rel_op: OP_LE .

    $default  reduce using rule 81 (rel_op)


State 131

   78 relop_expr: expr rel_op . expr

    OP_SUB       shift, and go to state 87
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const      go to state 40
    literal_const  go to state 91
    expr           go to state 157
    term           go to state 97
    factor         go to state 98
    var_ref        go to state 99


State 132

   86 expr: expr add_op . term

    OP_SUB       shift, and go to state 87
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const      go to state 40
    literal_const  go to state 91
    term           go to state 158
    factor         go to state 98
    var_ref        go to state 99


State 133

   92 mul_op: OP_MUL .

    $default  reduce using rule 92 (mul_op)


State 134

   93 mul_op: OP_DIV .

    $default  reduce using rule 93 (mul_op)


State 135

   94 mul_op: OP_MOD .

    $default  reduce using rule 94 (mul_op)


State 136

   90 term: term mul_op . factor

    OP_SUB       shift, and go to state 87
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const      go to state 40
    literal_const  go to state 91
    factor         go to state 159
    var_ref        go to state 99


State 137

   60 simple_stmt: PRINT boolean_expr MK_SEMICOLON .

    $default  reduce using rule 60 (simple_stmt)


State 138

   61 simple_stmt: READ boolean_expr MK_SEMICOLON .

    $default  reduce using rule 61 (simple_stmt)


State 139

   67 return_stmt: RETURN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 67 (return_stmt)


State 140

   65 while_stmt: WHILE boolean_expr DO . opt_stmt_list END DO

    BEG     shift, and go to state 23
    FOR     shift, and go to state 62
    IF      shift, and go to state 63
    PRINT   shift, and go to state 64
    READ    shift, and go to state 65
    RETURN  shift, and go to state 66
    WHILE   shift, and go to state 67
    ID      shift, and go to state 68

    $default  reduce using rule 56 (opt_stmt_list)

    stmt            go to state 69
    compound_stmt   go to state 70
    opt_stmt_list   go to state 160
    stmt_list       go to state 72
    simple_stmt     go to state 73
    proc_call_stmt  go to state 74
    cond_stmt       go to state 75
    while_stmt      go to state 76
    for_stmt        go to state 77
    return_stmt     go to state 78
    var_ref         go to state 79


State 141

   62 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN MK_SEMICOLON

    MK_RPAREN  shift, and go to state 161


State 142

   68 opt_boolean_expr_list: boolean_expr_list .
   70 boolean_expr_list: boolean_expr_list . MK_COMMA boolean_expr

    MK_COMMA  shift, and go to state 162

    $default  reduce using rule 68 (opt_boolean_expr_list)


State 143

   71 boolean_expr_list: boolean_expr .
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 121

    $default  reduce using rule 71 (boolean_expr_list)


State 144

   59 simple_stmt: var_ref OP_ASSIGN boolean_expr . MK_SEMICOLON
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR         shift, and go to state 121
    MK_SEMICOLON  shift, and go to state 163


State 145

   72 boolean_expr: boolean_expr . OP_OR boolean_term
  104 dim: MK_LB boolean_expr . MK_RB

    OP_OR  shift, and go to state 121
    MK_RB  shift, and go to state 164


State 146

   45 array_type: ARRAY int_const TO int_const OF type .

    $default  reduce using rule 45 (array_type)


State 147

   37 opt_type: MK_COLON type .

    $default  reduce using rule 37 (opt_type)


State 148

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 . MK_SEMICOLON compound_stmt END ID

    MK_SEMICOLON  shift, and go to state 165


State 149

   66 for_stmt: FOR ID OP_ASSIGN int_const . TO int_const DO opt_stmt_list END DO

    TO  shift, and go to state 166


State 150

   72 boolean_expr: boolean_expr . OP_OR boolean_term
   98 factor: OP_SUB MK_LPAREN boolean_expr . MK_RPAREN

    OP_OR      shift, and go to state 121
    MK_RPAREN  shift, and go to state 167


State 151

  100 factor: OP_SUB ID MK_LPAREN . opt_boolean_expr_list MK_RPAREN

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    $default  reduce using rule 69 (opt_boolean_expr_list)

    int_const              go to state 40
    literal_const          go to state 91
    opt_boolean_expr_list  go to state 168
    boolean_expr_list      go to state 142
    boolean_expr           go to state 143
    boolean_term           go to state 93
    boolean_factor         go to state 94
    relop_expr             go to state 95
    expr                   go to state 96
    term                   go to state 97
    factor                 go to state 98
    var_ref                go to state 99


State 152

   97 factor: MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 97 (factor)


State 153

   99 factor: ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 169


State 154

   63 cond_stmt: IF boolean_expr THEN opt_stmt_list . ELSE opt_stmt_list END IF
   64          | IF boolean_expr THEN opt_stmt_list . END IF

    ELSE  shift, and go to state 170
    END   shift, and go to state 171


State 155

   72 boolean_expr: boolean_expr OP_OR boolean_term .
   74 boolean_term: boolean_term . OP_AND boolean_factor

    OP_AND  shift, and go to state 122

    $default  reduce using rule 72 (boolean_expr)


State 156

   74 boolean_term: boolean_term OP_AND boolean_factor .

    $default  reduce using rule 74 (boolean_term)


State 157

   78 relop_expr: expr rel_op expr .
   86 expr: expr . add_op term

    OP_ADD  shift, and go to state 123
    OP_SUB  shift, and go to state 124

    $default  reduce using rule 78 (relop_expr)

    add_op  go to state 132


State 158

   86 expr: expr add_op term .
   90 term: term . mul_op factor

    OP_MUL  shift, and go to state 133
    OP_DIV  shift, and go to state 134
    OP_MOD  shift, and go to state 135

    $default  reduce using rule 86 (expr)

    mul_op  go to state 136


State 159

   90 term: term mul_op factor .

    $default  reduce using rule 90 (term)


State 160

   65 while_stmt: WHILE boolean_expr DO opt_stmt_list . END DO

    END  shift, and go to state 172


State 161

   62 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 173


State 162

   70 boolean_expr_list: boolean_expr_list MK_COMMA . boolean_expr

    OP_SUB       shift, and go to state 87
    OP_NOT       shift, and go to state 88
    MK_LPAREN    shift, and go to state 89
    TRUE         shift, and go to state 33
    FALSE        shift, and go to state 34
    ID           shift, and go to state 90
    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36
    FLOAT_CONST  shift, and go to state 37
    SCIENTIFIC   shift, and go to state 38
    STR_CONST    shift, and go to state 39

    int_const       go to state 40
    literal_const   go to state 91
    boolean_expr    go to state 174
    boolean_term    go to state 93
    boolean_factor  go to state 94
    relop_expr      go to state 95
    expr            go to state 96
    term            go to state 97
    factor          go to state 98
    var_ref         go to state 99


State 163

   59 simple_stmt: var_ref OP_ASSIGN boolean_expr MK_SEMICOLON .

    $default  reduce using rule 59 (simple_stmt)


State 164

  104 dim: MK_LB boolean_expr MK_RB .

    $default  reduce using rule 104 (dim)


State 165

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON . compound_stmt END ID

    BEG  shift, and go to state 23

    compound_stmt  go to state 175


State 166

   66 for_stmt: FOR ID OP_ASSIGN int_const TO . int_const DO opt_stmt_list END DO

    INT_CONST    shift, and go to state 35
    OCTAL_CONST  shift, and go to state 36

    int_const  go to state 176


State 167

   98 factor: OP_SUB MK_LPAREN boolean_expr MK_RPAREN .

    $default  reduce using rule 98 (factor)


State 168

  100 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 177


State 169

   99 factor: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 99 (factor)


State 170

   63 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE . opt_stmt_list END IF

    BEG     shift, and go to state 23
    FOR     shift, and go to state 62
    IF      shift, and go to state 63
    PRINT   shift, and go to state 64
    READ    shift, and go to state 65
    RETURN  shift, and go to state 66
    WHILE   shift, and go to state 67
    ID      shift, and go to state 68

    $default  reduce using rule 56 (opt_stmt_list)

    stmt            go to state 69
    compound_stmt   go to state 70
    opt_stmt_list   go to state 178
    stmt_list       go to state 72
    simple_stmt     go to state 73
    proc_call_stmt  go to state 74
    cond_stmt       go to state 75
    while_stmt      go to state 76
    for_stmt        go to state 77
    return_stmt     go to state 78
    var_ref         go to state 79


State 171

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list END . IF

    IF  shift, and go to state 179


State 172

   65 while_stmt: WHILE boolean_expr DO opt_stmt_list END . DO

    DO  shift, and go to state 180


State 173

   62 proc_call_stmt: ID MK_LPAREN opt_boolean_expr_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 62 (proc_call_stmt)


State 174

   70 boolean_expr_list: boolean_expr_list MK_COMMA boolean_expr .
   72 boolean_expr: boolean_expr . OP_OR boolean_term

    OP_OR  shift, and go to state 121

    $default  reduce using rule 70 (boolean_expr_list)


State 175

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt . END ID

    END  shift, and go to state 181


State 176

   66 for_stmt: FOR ID OP_ASSIGN int_const TO int_const . DO opt_stmt_list END DO

    DO  shift, and go to state 182


State 177

  100 factor: OP_SUB ID MK_LPAREN opt_boolean_expr_list MK_RPAREN .

    $default  reduce using rule 100 (factor)


State 178

   63 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list . END IF

    END  shift, and go to state 183


State 179

   64 cond_stmt: IF boolean_expr THEN opt_stmt_list END IF .

    $default  reduce using rule 64 (cond_stmt)


State 180

   65 while_stmt: WHILE boolean_expr DO opt_stmt_list END DO .

    $default  reduce using rule 65 (while_stmt)


State 181

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END . ID

    ID  shift, and go to state 184


State 182

   66 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO . opt_stmt_list END DO

    BEG     shift, and go to state 23
    FOR     shift, and go to state 62
    IF      shift, and go to state 63
    PRINT   shift, and go to state 64
    READ    shift, and go to state 65
    RETURN  shift, and go to state 66
    WHILE   shift, and go to state 67
    ID      shift, and go to state 68

    $default  reduce using rule 56 (opt_stmt_list)

    stmt            go to state 69
    compound_stmt   go to state 70
    opt_stmt_list   go to state 185
    stmt_list       go to state 72
    simple_stmt     go to state 73
    proc_call_stmt  go to state 74
    cond_stmt       go to state 75
    while_stmt      go to state 76
    for_stmt        go to state 77
    return_stmt     go to state 78
    var_ref         go to state 79


State 183

   63 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END . IF

    IF  shift, and go to state 186


State 184

   29 func_decl: ID $@2 MK_LPAREN opt_param_list $@3 MK_RPAREN opt_type $@4 MK_SEMICOLON compound_stmt END ID .

    $default  reduce using rule 29 (func_decl)


State 185

   66 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list . END DO

    END  shift, and go to state 187


State 186

   63 cond_stmt: IF boolean_expr THEN opt_stmt_list ELSE opt_stmt_list END IF .

    $default  reduce using rule 63 (cond_stmt)


State 187

   66 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END . DO

    DO  shift, and go to state 188


State 188

   66 for_stmt: FOR ID OP_ASSIGN int_const TO int_const DO opt_stmt_list END DO .

    $default  reduce using rule 66 (for_stmt)

Terminals unused in grammar

   DEF


State 39 conflicts: 1 shift/reduce
State 57 conflicts: 1 shift/reduce
State 79 conflicts: 1 reduce/reduce
State 100 conflicts: 1 shift/reduce
State 153 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 epsilon: %empty

    2 program: ID ';' program_body _END ID

    3 program_body: var_declars func_declars compound_statement

    4 type: INTEGER
    5     | REAL
    6     | STRING
    7     | BOOLEAN

    8 constant: CONSTANT_INT
    9         | CONSTANT_REAL
   10         | CONSTANT_STRING
   11         | TRUE
   12         | FALSE

   13 var_declars: var_declar var_declars
   14            | epsilon

   15 var_declar: VAR identifiers ':' type ';'
   16           | VAR identifiers ':' array_type ';'
   17           | VAR identifiers ':' constant ';'

   18 array_type: type
   19           | ARRAY CONSTANT_INT TO CONSTANT_INT OF array_type

   20 func_declars: func_declar func_declars
   21             | epsilon

   22 func_declar: ID '(' arguments ')' func_type ';' compound_statement _END ID

   23 arguments: argument arguments
   24          | ',' argument arguments
   25          | epsilon

   26 argument: identifiers ':' type

   27 func_type: ':' type
   28          | epsilon

   29 identifiers: ID identifiers
   30            | ',' ID identifiers
   31            | epsilon

   32 compound_statement: _BEGIN var_declars statements _END

   33 statements: statement statements
   34           | epsilon

   35 statement: read ';'
   36          | print ';'
   37          | assignment ';'
   38          | return ';'
   39          | function_call ';'
   40          | compound_statement
   41          | flow

   42 read: READ var

   43 print: PRINT expr
   44      | PRINT CONSTANT_STRING

   45 assignment: var ASSIGN expr

   46 return: RETURN expr

   47 var: ID var_

   48 var_: '[' expr ']' var_
   49     | epsilon

   50 function_call: ID '(' exprs ')'

   51 exprs: expr exprs
   52      | ',' expr exprs
   53      | epsilon

   54 expr: operand expr_
   55     | '(' expr ')' expr_

   56 expr_: binary_operator expr
   57      | epsilon

   58 operand: unary_operator operand
   59        | var
   60        | function_call
   61        | CONSTANT_INT
   62        | CONSTANT_REAL
   63        | TRUE
   64        | FALSE

   65 unary_operator: '-'
   66               | NOT

   67 binary_operator: '+'
   68                | '-'
   69                | '*'
   70                | '/'
   71                | MOD
   72                | SMALLER
   73                | SMALLER_EQUAL
   74                | EQUAL
   75                | NOT_EQUAL
   76                | GREATER_EQUAL
   77                | GREATER
   78                | AND
   79                | OR

   80 flow: if
   81     | while
   82     | for

   83 if: IF expr THEN statements else _END IF

   84 else: ELSE statements
   85     | epsilon

   86 while: WHILE expr DO statements _END DO

   87 for: FOR ID ASSIGN CONSTANT_INT TO CONSTANT_INT DO statements _END DO


Terminals, with rules where they appear

$end (0) 0
'(' (40) 22 50 55
')' (41) 22 50 55
'*' (42) 69
'+' (43) 67
',' (44) 24 30 52
'-' (45) 65 68
'/' (47) 70
':' (58) 15 16 17 26 27
';' (59) 2 15 16 17 22 35 36 37 38 39
'[' (91) 48
']' (93) 48
error (256)
CONSTANT_INT (258) 8 19 61 87
CONSTANT_REAL (259) 9 62
CONSTANT_STRING (260) 10 44
ID (261) 2 22 29 30 47 50 87
MOD (262) 71
ASSIGN (263) 45 87
SMALLER (264) 72
SMALLER_EQUAL (265) 73
NOT_EQUAL (266) 75
GREATER_EQUAL (267) 76
GREATER (268) 77
EQUAL (269) 74
AND (270) 78
OR (271) 79
NOT (272) 66
ARRAY (273) 19
_BEGIN (274) 32
BOOLEAN (275) 7
DEF (276)
DO (277) 86 87
ELSE (278) 84
_END (279) 2 22 32 83 86 87
FALSE (280) 12 64
FOR (281) 87
INTEGER (282) 4
IF (283) 83
OF (284) 19
PRINT (285) 43 44
READ (286) 42
REAL (287) 5
STRING (288) 6
THEN (289) 83
TO (290) 19 87
TRUE (291) 11 63
RETURN (292) 46
VAR (293) 15 16 17
WHILE (294) 86
UMINUS (295)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
epsilon (53)
    on left: 1, on right: 14 21 25 28 31 34 49 53 57 85
program (54)
    on left: 2, on right: 0
program_body (55)
    on left: 3, on right: 2
type (56)
    on left: 4 5 6 7, on right: 15 18 26 27
constant (57)
    on left: 8 9 10 11 12, on right: 17
var_declars (58)
    on left: 13 14, on right: 3 13 32
var_declar (59)
    on left: 15 16 17, on right: 13
array_type (60)
    on left: 18 19, on right: 16 19
func_declars (61)
    on left: 20 21, on right: 3 20
func_declar (62)
    on left: 22, on right: 20
arguments (63)
    on left: 23 24 25, on right: 22 23 24
argument (64)
    on left: 26, on right: 23 24
func_type (65)
    on left: 27 28, on right: 22
identifiers (66)
    on left: 29 30 31, on right: 15 16 17 26 29 30
compound_statement (67)
    on left: 32, on right: 3 22 40
statements (68)
    on left: 33 34, on right: 32 33 83 84 86 87
statement (69)
    on left: 35 36 37 38 39 40 41, on right: 33
read (70)
    on left: 42, on right: 35
print (71)
    on left: 43 44, on right: 36
assignment (72)
    on left: 45, on right: 37
return (73)
    on left: 46, on right: 38
var (74)
    on left: 47, on right: 42 45 59
var_ (75)
    on left: 48 49, on right: 47 48
function_call (76)
    on left: 50, on right: 39 60
exprs (77)
    on left: 51 52 53, on right: 50 51 52
expr (78)
    on left: 54 55, on right: 43 45 46 48 51 52 55 56 83 86
expr_ (79)
    on left: 56 57, on right: 54 55
operand (80)
    on left: 58 59 60 61 62 63 64, on right: 54 58
unary_operator (81)
    on left: 65 66, on right: 58
binary_operator (82)
    on left: 67 68 69 70 71 72 73 74 75 76 77 78 79, on right: 56
flow (83)
    on left: 80 81 82, on right: 41
if (84)
    on left: 83, on right: 80
else (85)
    on left: 84 85, on right: 83
while (86)
    on left: 86, on right: 81
for (87)
    on left: 87, on right: 82


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program  go to state 2


State 1

    2 program: ID . ';' program_body _END ID

    ';'  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    2 program: ID ';' . program_body _END ID

    VAR  shift, and go to state 5

    $default  reduce using rule 1 (epsilon)

    epsilon       go to state 6
    program_body  go to state 7
    var_declars   go to state 8
    var_declar    go to state 9


State 4

    0 $accept: program $end .

    $default  accept


State 5

   15 var_declar: VAR . identifiers ':' type ';'
   16           | VAR . identifiers ':' array_type ';'
   17           | VAR . identifiers ':' constant ';'

    ID   shift, and go to state 10
    ','  shift, and go to state 11

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 12
    identifiers  go to state 13


State 6

   14 var_declars: epsilon .

    $default  reduce using rule 14 (var_declars)


State 7

    2 program: ID ';' program_body . _END ID

    _END  shift, and go to state 14


State 8

    3 program_body: var_declars . func_declars compound_statement

    ID  shift, and go to state 15

    $default  reduce using rule 1 (epsilon)

    epsilon       go to state 16
    func_declars  go to state 17
    func_declar   go to state 18


State 9

   13 var_declars: var_declar . var_declars

    VAR  shift, and go to state 5

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 6
    var_declars  go to state 19
    var_declar   go to state 9


State 10

   29 identifiers: ID . identifiers

    ID   shift, and go to state 10
    ','  shift, and go to state 11

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 12
    identifiers  go to state 20


State 11

   30 identifiers: ',' . ID identifiers

    ID  shift, and go to state 21


State 12

   31 identifiers: epsilon .

    $default  reduce using rule 31 (identifiers)


State 13

   15 var_declar: VAR identifiers . ':' type ';'
   16           | VAR identifiers . ':' array_type ';'
   17           | VAR identifiers . ':' constant ';'

    ':'  shift, and go to state 22


State 14

    2 program: ID ';' program_body _END . ID

    ID  shift, and go to state 23


State 15

   22 func_declar: ID . '(' arguments ')' func_type ';' compound_statement _END ID

    '('  shift, and go to state 24


State 16

   21 func_declars: epsilon .

    $default  reduce using rule 21 (func_declars)


State 17

    3 program_body: var_declars func_declars . compound_statement

    _BEGIN  shift, and go to state 25

    compound_statement  go to state 26


State 18

   20 func_declars: func_declar . func_declars

    ID  shift, and go to state 15

    $default  reduce using rule 1 (epsilon)

    epsilon       go to state 16
    func_declars  go to state 27
    func_declar   go to state 18


State 19

   13 var_declars: var_declar var_declars .

    $default  reduce using rule 13 (var_declars)


State 20

   29 identifiers: ID identifiers .

    $default  reduce using rule 29 (identifiers)


State 21

   30 identifiers: ',' ID . identifiers

    ID   shift, and go to state 10
    ','  shift, and go to state 11

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 12
    identifiers  go to state 28


State 22

   15 var_declar: VAR identifiers ':' . type ';'
   16           | VAR identifiers ':' . array_type ';'
   17           | VAR identifiers ':' . constant ';'

    CONSTANT_INT     shift, and go to state 29
    CONSTANT_REAL    shift, and go to state 30
    CONSTANT_STRING  shift, and go to state 31
    ARRAY            shift, and go to state 32
    BOOLEAN          shift, and go to state 33
    FALSE            shift, and go to state 34
    INTEGER          shift, and go to state 35
    REAL             shift, and go to state 36
    STRING           shift, and go to state 37
    TRUE             shift, and go to state 38

    type        go to state 39
    constant    go to state 40
    array_type  go to state 41


State 23

    2 program: ID ';' program_body _END ID .

    $default  reduce using rule 2 (program)


State 24

   22 func_declar: ID '(' . arguments ')' func_type ';' compound_statement _END ID

    ID   shift, and go to state 10
    ','  shift, and go to state 42

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 43
    arguments    go to state 44
    argument     go to state 45
    identifiers  go to state 46


State 25

   32 compound_statement: _BEGIN . var_declars statements _END

    VAR  shift, and go to state 5

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 6
    var_declars  go to state 47
    var_declar   go to state 9


State 26

    3 program_body: var_declars func_declars compound_statement .

    $default  reduce using rule 3 (program_body)


State 27

   20 func_declars: func_declar func_declars .

    $default  reduce using rule 20 (func_declars)


State 28

   30 identifiers: ',' ID identifiers .

    $default  reduce using rule 30 (identifiers)


State 29

    8 constant: CONSTANT_INT .

    $default  reduce using rule 8 (constant)


State 30

    9 constant: CONSTANT_REAL .

    $default  reduce using rule 9 (constant)


State 31

   10 constant: CONSTANT_STRING .

    $default  reduce using rule 10 (constant)


State 32

   19 array_type: ARRAY . CONSTANT_INT TO CONSTANT_INT OF array_type

    CONSTANT_INT  shift, and go to state 48


State 33

    7 type: BOOLEAN .

    $default  reduce using rule 7 (type)


State 34

   12 constant: FALSE .

    $default  reduce using rule 12 (constant)


State 35

    4 type: INTEGER .

    $default  reduce using rule 4 (type)


State 36

    5 type: REAL .

    $default  reduce using rule 5 (type)


State 37

    6 type: STRING .

    $default  reduce using rule 6 (type)


State 38

   11 constant: TRUE .

    $default  reduce using rule 11 (constant)


State 39

   15 var_declar: VAR identifiers ':' type . ';'
   18 array_type: type .

    ';'  shift, and go to state 49

    ';'  [reduce using rule 18 (array_type)]


State 40

   17 var_declar: VAR identifiers ':' constant . ';'

    ';'  shift, and go to state 50


State 41

   16 var_declar: VAR identifiers ':' array_type . ';'

    ';'  shift, and go to state 51


State 42

   24 arguments: ',' . argument arguments
   30 identifiers: ',' . ID identifiers

    ID   shift, and go to state 52
    ','  shift, and go to state 11

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 12
    argument     go to state 53
    identifiers  go to state 46


State 43

   25 arguments: epsilon .
   31 identifiers: epsilon .

    ':'       reduce using rule 31 (identifiers)
    $default  reduce using rule 25 (arguments)


State 44

   22 func_declar: ID '(' arguments . ')' func_type ';' compound_statement _END ID

    ')'  shift, and go to state 54


State 45

   23 arguments: argument . arguments

    ID   shift, and go to state 10
    ','  shift, and go to state 42

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 43
    arguments    go to state 55
    argument     go to state 45
    identifiers  go to state 46


State 46

   26 argument: identifiers . ':' type

    ':'  shift, and go to state 56


State 47

   32 compound_statement: _BEGIN var_declars . statements _END

    ID      shift, and go to state 57
    _BEGIN  shift, and go to state 25
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63

    $default  reduce using rule 1 (epsilon)

    epsilon             go to state 64
    compound_statement  go to state 65
    statements          go to state 66
    statement           go to state 67
    read                go to state 68
    print               go to state 69
    assignment          go to state 70
    return              go to state 71
    var                 go to state 72
    function_call       go to state 73
    flow                go to state 74
    if                  go to state 75
    while               go to state 76
    for                 go to state 77


State 48

   19 array_type: ARRAY CONSTANT_INT . TO CONSTANT_INT OF array_type

    TO  shift, and go to state 78


State 49

   15 var_declar: VAR identifiers ':' type ';' .

    $default  reduce using rule 15 (var_declar)


State 50

   17 var_declar: VAR identifiers ':' constant ';' .

    $default  reduce using rule 17 (var_declar)


State 51

   16 var_declar: VAR identifiers ':' array_type ';' .

    $default  reduce using rule 16 (var_declar)


State 52

   29 identifiers: ID . identifiers
   30            | ',' ID . identifiers

    ID   shift, and go to state 10
    ','  shift, and go to state 11

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 12
    identifiers  go to state 79


State 53

   24 arguments: ',' argument . arguments

    ID   shift, and go to state 10
    ','  shift, and go to state 42

    $default  reduce using rule 1 (epsilon)

    epsilon      go to state 43
    arguments    go to state 80
    argument     go to state 45
    identifiers  go to state 46


State 54

   22 func_declar: ID '(' arguments ')' . func_type ';' compound_statement _END ID

    ':'  shift, and go to state 81

    $default  reduce using rule 1 (epsilon)

    epsilon    go to state 82
    func_type  go to state 83


State 55

   23 arguments: argument arguments .

    $default  reduce using rule 23 (arguments)


State 56

   26 argument: identifiers ':' . type

    BOOLEAN  shift, and go to state 33
    INTEGER  shift, and go to state 35
    REAL     shift, and go to state 36
    STRING   shift, and go to state 37

    type  go to state 84


State 57

   47 var: ID . var_
   50 function_call: ID . '(' exprs ')'

    '('  shift, and go to state 85
    '['  shift, and go to state 86

    '('       [reduce using rule 1 (epsilon)]
    $default  reduce using rule 1 (epsilon)

    epsilon  go to state 87
    var_     go to state 88


State 58

   87 for: FOR . ID ASSIGN CONSTANT_INT TO CONSTANT_INT DO statements _END DO

    ID  shift, and go to state 89


State 59

   83 if: IF . expr THEN statements else _END IF

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 99
    operand         go to state 100
    unary_operator  go to state 101


State 60

   43 print: PRINT . expr
   44      | PRINT . CONSTANT_STRING

    CONSTANT_INT     shift, and go to state 90
    CONSTANT_REAL    shift, and go to state 91
    CONSTANT_STRING  shift, and go to state 102
    ID               shift, and go to state 57
    NOT              shift, and go to state 92
    FALSE            shift, and go to state 93
    TRUE             shift, and go to state 94
    '('              shift, and go to state 95
    '-'              shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 103
    operand         go to state 100
    unary_operator  go to state 101


State 61

   42 read: READ . var

    ID  shift, and go to state 104

    var  go to state 105


State 62

   46 return: RETURN . expr

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 106
    operand         go to state 100
    unary_operator  go to state 101


State 63

   86 while: WHILE . expr DO statements _END DO

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 107
    operand         go to state 100
    unary_operator  go to state 101


State 64

   34 statements: epsilon .

    $default  reduce using rule 34 (statements)


State 65

   40 statement: compound_statement .

    $default  reduce using rule 40 (statement)


State 66

   32 compound_statement: _BEGIN var_declars statements . _END

    _END  shift, and go to state 108


State 67

   33 statements: statement . statements

    ID      shift, and go to state 57
    _BEGIN  shift, and go to state 25
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63

    $default  reduce using rule 1 (epsilon)

    epsilon             go to state 64
    compound_statement  go to state 65
    statements          go to state 109
    statement           go to state 67
    read                go to state 68
    print               go to state 69
    assignment          go to state 70
    return              go to state 71
    var                 go to state 72
    function_call       go to state 73
    flow                go to state 74
    if                  go to state 75
    while               go to state 76
    for                 go to state 77


State 68

   35 statement: read . ';'

    ';'  shift, and go to state 110


State 69

   36 statement: print . ';'

    ';'  shift, and go to state 111


State 70

   37 statement: assignment . ';'

    ';'  shift, and go to state 112


State 71

   38 statement: return . ';'

    ';'  shift, and go to state 113


State 72

   45 assignment: var . ASSIGN expr

    ASSIGN  shift, and go to state 114


State 73

   39 statement: function_call . ';'

    ';'  shift, and go to state 115


State 74

   41 statement: flow .

    $default  reduce using rule 41 (statement)


State 75

   80 flow: if .

    $default  reduce using rule 80 (flow)


State 76

   81 flow: while .

    $default  reduce using rule 81 (flow)


State 77

   82 flow: for .

    $default  reduce using rule 82 (flow)


State 78

   19 array_type: ARRAY CONSTANT_INT TO . CONSTANT_INT OF array_type

    CONSTANT_INT  shift, and go to state 116


State 79

   29 identifiers: ID identifiers .
   30            | ',' ID identifiers .

    ':'       reduce using rule 29 (identifiers)
    ':'       [reduce using rule 30 (identifiers)]
    $default  reduce using rule 29 (identifiers)


State 80

   24 arguments: ',' argument arguments .

    $default  reduce using rule 24 (arguments)


State 81

   27 func_type: ':' . type

    BOOLEAN  shift, and go to state 33
    INTEGER  shift, and go to state 35
    REAL     shift, and go to state 36
    STRING   shift, and go to state 37

    type  go to state 117


State 82

   28 func_type: epsilon .

    $default  reduce using rule 28 (func_type)


State 83

   22 func_declar: ID '(' arguments ')' func_type . ';' compound_statement _END ID

    ';'  shift, and go to state 118


State 84

   26 argument: identifiers ':' type .

    $default  reduce using rule 26 (argument)


State 85

   50 function_call: ID '(' . exprs ')'

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96
    ','            shift, and go to state 119

    $default  reduce using rule 1 (epsilon)

    epsilon         go to state 120
    var             go to state 97
    function_call   go to state 98
    exprs           go to state 121
    expr            go to state 122
    operand         go to state 100
    unary_operator  go to state 101


State 86

   48 var_: '[' . expr ']' var_

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 123
    operand         go to state 100
    unary_operator  go to state 101


State 87

   49 var_: epsilon .

    $default  reduce using rule 49 (var_)


State 88

   47 var: ID var_ .

    $default  reduce using rule 47 (var)


State 89

   87 for: FOR ID . ASSIGN CONSTANT_INT TO CONSTANT_INT DO statements _END DO

    ASSIGN  shift, and go to state 124


State 90

   61 operand: CONSTANT_INT .

    $default  reduce using rule 61 (operand)


State 91

   62 operand: CONSTANT_REAL .

    $default  reduce using rule 62 (operand)


State 92

   66 unary_operator: NOT .

    $default  reduce using rule 66 (unary_operator)


State 93

   64 operand: FALSE .

    $default  reduce using rule 64 (operand)


State 94

   63 operand: TRUE .

    $default  reduce using rule 63 (operand)


State 95

   55 expr: '(' . expr ')' expr_

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 125
    operand         go to state 100
    unary_operator  go to state 101


State 96

   65 unary_operator: '-' .

    $default  reduce using rule 65 (unary_operator)


State 97

   59 operand: var .

    $default  reduce using rule 59 (operand)


State 98

   60 operand: function_call .

    $default  reduce using rule 60 (operand)


State 99

   83 if: IF expr . THEN statements else _END IF

    THEN  shift, and go to state 126


State 100

   54 expr: operand . expr_

    MOD            shift, and go to state 127
    SMALLER        shift, and go to state 128
    SMALLER_EQUAL  shift, and go to state 129
    NOT_EQUAL      shift, and go to state 130
    GREATER_EQUAL  shift, and go to state 131
    GREATER        shift, and go to state 132
    EQUAL          shift, and go to state 133
    AND            shift, and go to state 134
    OR             shift, and go to state 135
    '*'            shift, and go to state 136
    '/'            shift, and go to state 137
    '+'            shift, and go to state 138
    '-'            shift, and go to state 139

    '-'       [reduce using rule 1 (epsilon)]
    $default  reduce using rule 1 (epsilon)

    epsilon          go to state 140
    expr_            go to state 141
    binary_operator  go to state 142


State 101

   58 operand: unary_operator . operand

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    operand         go to state 143
    unary_operator  go to state 101


State 102

   44 print: PRINT CONSTANT_STRING .

    $default  reduce using rule 44 (print)


State 103

   43 print: PRINT expr .

    $default  reduce using rule 43 (print)


State 104

   47 var: ID . var_

    '['  shift, and go to state 86

    $default  reduce using rule 1 (epsilon)

    epsilon  go to state 87
    var_     go to state 88


State 105

   42 read: READ var .

    $default  reduce using rule 42 (read)


State 106

   46 return: RETURN expr .

    $default  reduce using rule 46 (return)


State 107

   86 while: WHILE expr . DO statements _END DO

    DO  shift, and go to state 144


State 108

   32 compound_statement: _BEGIN var_declars statements _END .

    $default  reduce using rule 32 (compound_statement)


State 109

   33 statements: statement statements .

    $default  reduce using rule 33 (statements)


State 110

   35 statement: read ';' .

    $default  reduce using rule 35 (statement)


State 111

   36 statement: print ';' .

    $default  reduce using rule 36 (statement)


State 112

   37 statement: assignment ';' .

    $default  reduce using rule 37 (statement)


State 113

   38 statement: return ';' .

    $default  reduce using rule 38 (statement)


State 114

   45 assignment: var ASSIGN . expr

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 145
    operand         go to state 100
    unary_operator  go to state 101


State 115

   39 statement: function_call ';' .

    $default  reduce using rule 39 (statement)


State 116

   19 array_type: ARRAY CONSTANT_INT TO CONSTANT_INT . OF array_type

    OF  shift, and go to state 146


State 117

   27 func_type: ':' type .

    $default  reduce using rule 27 (func_type)


State 118

   22 func_declar: ID '(' arguments ')' func_type ';' . compound_statement _END ID

    _BEGIN  shift, and go to state 25

    compound_statement  go to state 147


State 119

   52 exprs: ',' . expr exprs

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 148
    operand         go to state 100
    unary_operator  go to state 101


State 120

   53 exprs: epsilon .

    $default  reduce using rule 53 (exprs)


State 121

   50 function_call: ID '(' exprs . ')'

    ')'  shift, and go to state 149


State 122

   51 exprs: expr . exprs

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96
    ','            shift, and go to state 119

    $default  reduce using rule 1 (epsilon)

    epsilon         go to state 120
    var             go to state 97
    function_call   go to state 98
    exprs           go to state 150
    expr            go to state 122
    operand         go to state 100
    unary_operator  go to state 101


State 123

   48 var_: '[' expr . ']' var_

    ']'  shift, and go to state 151


State 124

   87 for: FOR ID ASSIGN . CONSTANT_INT TO CONSTANT_INT DO statements _END DO

    CONSTANT_INT  shift, and go to state 152


State 125

   55 expr: '(' expr . ')' expr_

    ')'  shift, and go to state 153


State 126

   83 if: IF expr THEN . statements else _END IF

    ID      shift, and go to state 57
    _BEGIN  shift, and go to state 25
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63

    $default  reduce using rule 1 (epsilon)

    epsilon             go to state 64
    compound_statement  go to state 65
    statements          go to state 154
    statement           go to state 67
    read                go to state 68
    print               go to state 69
    assignment          go to state 70
    return              go to state 71
    var                 go to state 72
    function_call       go to state 73
    flow                go to state 74
    if                  go to state 75
    while               go to state 76
    for                 go to state 77


State 127

   71 binary_operator: MOD .

    $default  reduce using rule 71 (binary_operator)


State 128

   72 binary_operator: SMALLER .

    $default  reduce using rule 72 (binary_operator)


State 129

   73 binary_operator: SMALLER_EQUAL .

    $default  reduce using rule 73 (binary_operator)


State 130

   75 binary_operator: NOT_EQUAL .

    $default  reduce using rule 75 (binary_operator)


State 131

   76 binary_operator: GREATER_EQUAL .

    $default  reduce using rule 76 (binary_operator)


State 132

   77 binary_operator: GREATER .

    $default  reduce using rule 77 (binary_operator)


State 133

   74 binary_operator: EQUAL .

    $default  reduce using rule 74 (binary_operator)


State 134

   78 binary_operator: AND .

    $default  reduce using rule 78 (binary_operator)


State 135

   79 binary_operator: OR .

    $default  reduce using rule 79 (binary_operator)


State 136

   69 binary_operator: '*' .

    $default  reduce using rule 69 (binary_operator)


State 137

   70 binary_operator: '/' .

    $default  reduce using rule 70 (binary_operator)


State 138

   67 binary_operator: '+' .

    $default  reduce using rule 67 (binary_operator)


State 139

   68 binary_operator: '-' .

    $default  reduce using rule 68 (binary_operator)


State 140

   57 expr_: epsilon .

    $default  reduce using rule 57 (expr_)


State 141

   54 expr: operand expr_ .

    $default  reduce using rule 54 (expr)


State 142

   56 expr_: binary_operator . expr

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96

    var             go to state 97
    function_call   go to state 98
    expr            go to state 155
    operand         go to state 100
    unary_operator  go to state 101


State 143

   58 operand: unary_operator operand .

    $default  reduce using rule 58 (operand)


State 144

   86 while: WHILE expr DO . statements _END DO

    ID      shift, and go to state 57
    _BEGIN  shift, and go to state 25
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63

    $default  reduce using rule 1 (epsilon)

    epsilon             go to state 64
    compound_statement  go to state 65
    statements          go to state 156
    statement           go to state 67
    read                go to state 68
    print               go to state 69
    assignment          go to state 70
    return              go to state 71
    var                 go to state 72
    function_call       go to state 73
    flow                go to state 74
    if                  go to state 75
    while               go to state 76
    for                 go to state 77


State 145

   45 assignment: var ASSIGN expr .

    $default  reduce using rule 45 (assignment)


State 146

   19 array_type: ARRAY CONSTANT_INT TO CONSTANT_INT OF . array_type

    ARRAY    shift, and go to state 32
    BOOLEAN  shift, and go to state 33
    INTEGER  shift, and go to state 35
    REAL     shift, and go to state 36
    STRING   shift, and go to state 37

    type        go to state 157
    array_type  go to state 158


State 147

   22 func_declar: ID '(' arguments ')' func_type ';' compound_statement . _END ID

    _END  shift, and go to state 159


State 148

   52 exprs: ',' expr . exprs

    CONSTANT_INT   shift, and go to state 90
    CONSTANT_REAL  shift, and go to state 91
    ID             shift, and go to state 57
    NOT            shift, and go to state 92
    FALSE          shift, and go to state 93
    TRUE           shift, and go to state 94
    '('            shift, and go to state 95
    '-'            shift, and go to state 96
    ','            shift, and go to state 119

    $default  reduce using rule 1 (epsilon)

    epsilon         go to state 120
    var             go to state 97
    function_call   go to state 98
    exprs           go to state 160
    expr            go to state 122
    operand         go to state 100
    unary_operator  go to state 101


State 149

   50 function_call: ID '(' exprs ')' .

    $default  reduce using rule 50 (function_call)


State 150

   51 exprs: expr exprs .

    $default  reduce using rule 51 (exprs)


State 151

   48 var_: '[' expr ']' . var_

    '['  shift, and go to state 86

    $default  reduce using rule 1 (epsilon)

    epsilon  go to state 87
    var_     go to state 161


State 152

   87 for: FOR ID ASSIGN CONSTANT_INT . TO CONSTANT_INT DO statements _END DO

    TO  shift, and go to state 162


State 153

   55 expr: '(' expr ')' . expr_

    MOD            shift, and go to state 127
    SMALLER        shift, and go to state 128
    SMALLER_EQUAL  shift, and go to state 129
    NOT_EQUAL      shift, and go to state 130
    GREATER_EQUAL  shift, and go to state 131
    GREATER        shift, and go to state 132
    EQUAL          shift, and go to state 133
    AND            shift, and go to state 134
    OR             shift, and go to state 135
    '*'            shift, and go to state 136
    '/'            shift, and go to state 137
    '+'            shift, and go to state 138
    '-'            shift, and go to state 139

    '-'       [reduce using rule 1 (epsilon)]
    $default  reduce using rule 1 (epsilon)

    epsilon          go to state 140
    expr_            go to state 163
    binary_operator  go to state 142


State 154

   83 if: IF expr THEN statements . else _END IF

    ELSE  shift, and go to state 164

    $default  reduce using rule 1 (epsilon)

    epsilon  go to state 165
    else     go to state 166


State 155

   56 expr_: binary_operator expr .

    $default  reduce using rule 56 (expr_)


State 156

   86 while: WHILE expr DO statements . _END DO

    _END  shift, and go to state 167


State 157

   18 array_type: type .

    $default  reduce using rule 18 (array_type)


State 158

   19 array_type: ARRAY CONSTANT_INT TO CONSTANT_INT OF array_type .

    $default  reduce using rule 19 (array_type)


State 159

   22 func_declar: ID '(' arguments ')' func_type ';' compound_statement _END . ID

    ID  shift, and go to state 168


State 160

   52 exprs: ',' expr exprs .

    $default  reduce using rule 52 (exprs)


State 161

   48 var_: '[' expr ']' var_ .

    $default  reduce using rule 48 (var_)


State 162

   87 for: FOR ID ASSIGN CONSTANT_INT TO . CONSTANT_INT DO statements _END DO

    CONSTANT_INT  shift, and go to state 169


State 163

   55 expr: '(' expr ')' expr_ .

    $default  reduce using rule 55 (expr)


State 164

   84 else: ELSE . statements

    ID      shift, and go to state 57
    _BEGIN  shift, and go to state 25
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63

    $default  reduce using rule 1 (epsilon)

    epsilon             go to state 64
    compound_statement  go to state 65
    statements          go to state 170
    statement           go to state 67
    read                go to state 68
    print               go to state 69
    assignment          go to state 70
    return              go to state 71
    var                 go to state 72
    function_call       go to state 73
    flow                go to state 74
    if                  go to state 75
    while               go to state 76
    for                 go to state 77


State 165

   85 else: epsilon .

    $default  reduce using rule 85 (else)


State 166

   83 if: IF expr THEN statements else . _END IF

    _END  shift, and go to state 171


State 167

   86 while: WHILE expr DO statements _END . DO

    DO  shift, and go to state 172


State 168

   22 func_declar: ID '(' arguments ')' func_type ';' compound_statement _END ID .

    $default  reduce using rule 22 (func_declar)


State 169

   87 for: FOR ID ASSIGN CONSTANT_INT TO CONSTANT_INT . DO statements _END DO

    DO  shift, and go to state 173


State 170

   84 else: ELSE statements .

    $default  reduce using rule 84 (else)


State 171

   83 if: IF expr THEN statements else _END . IF

    IF  shift, and go to state 174


State 172

   86 while: WHILE expr DO statements _END DO .

    $default  reduce using rule 86 (while)


State 173

   87 for: FOR ID ASSIGN CONSTANT_INT TO CONSTANT_INT DO . statements _END DO

    ID      shift, and go to state 57
    _BEGIN  shift, and go to state 25
    FOR     shift, and go to state 58
    IF      shift, and go to state 59
    PRINT   shift, and go to state 60
    READ    shift, and go to state 61
    RETURN  shift, and go to state 62
    WHILE   shift, and go to state 63

    $default  reduce using rule 1 (epsilon)

    epsilon             go to state 64
    compound_statement  go to state 65
    statements          go to state 175
    statement           go to state 67
    read                go to state 68
    print               go to state 69
    assignment          go to state 70
    return              go to state 71
    var                 go to state 72
    function_call       go to state 73
    flow                go to state 74
    if                  go to state 75
    while               go to state 76
    for                 go to state 77


State 174

   83 if: IF expr THEN statements else _END IF .

    $default  reduce using rule 83 (if)


State 175

   87 for: FOR ID ASSIGN CONSTANT_INT TO CONSTANT_INT DO statements . _END DO

    _END  shift, and go to state 176


State 176

   87 for: FOR ID ASSIGN CONSTANT_INT TO CONSTANT_INT DO statements _END . DO

    DO  shift, and go to state 177


State 177

   87 for: FOR ID ASSIGN CONSTANT_INT TO CONSTANT_INT DO statements _END DO .

    $default  reduce using rule 87 (for)
